{"version":3,"file":"static/js/43.74cab57d.chunk.js","mappings":"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","sources":["api/api.js","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'd9881d8d11d61bffba0c06d8dae5cb01';\n\nexport async function getTrandingMovie() {\n  const { data } = await axios(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n  return data.results;\n};\n\nexport async function getSearchMovie(query) {\n  const { data } = await axios(`${BASE_URL}//search/movie?api_key=${API_KEY}&query=${query}`);\n  return data.results;\n};\n\nexport async function getFullMovieInfo(id) {\n  const { data } = await axios(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport async function getMovieCast(id) {\n  const { data } = await axios(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport async function getMovieReviews(id) {\n  const { data } = await axios(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`);\n  return data;\n};","import styled from \"styled-components\";\nimport { Link as LinkDom, NavLink as NavLinkDom } from \"react-router-dom\";\n\nexport const NavLink = styled(NavLinkDom)`\ncolor: black;\n\n:hover {\n  color: red;\n}\n&.active {\n    color: red;\n  };\n`;\n\nexport const Main = styled.main`\nposition: relative;\n`;\n\nexport const Link = styled(LinkDom)`\ncolor: black;\nposition: absolute;\nleft: 12px;\ntop: 12px;\n\n:hover {\n  color: red;\n}\n`;\n\nexport const Container = styled.div`\npadding: 48px;\ndisplay: flex;\ngap: 18px;\n`;\n\nexport const Wrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\npadding: 32px;\ngap: 18px;\n`;\n\nexport const Span = styled.span`\nfont-weight: 700;\nfont-size: 22px;\n`;\n\nexport const Title = styled.h2`\nfont-size: 32px;\n`;\n\nexport const Text = styled.p`\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\n`;","import { useRef } from \"react\";\nimport { Container, Span, Title, Wrapper, Text, Link, Main, NavLink } from \"./MovieCard.styled\";\nimport { useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({ movie }) => {\n  const { title, release_date, poster_path, vote_average, overview, genres } = movie;\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/');\n\n  const poster = poster_path ? `https://image.tmdb.org/t/p/w400/${poster_path}` : '';\n  const releaseDate = new Date(release_date);\n  const releaseYear = releaseDate.getFullYear();\n  const userScore = `${(vote_average * 10).toFixed(0)}%`;\n\n  return (\n    <Main>\n      <Link to={backLink.current}>Go Back</Link>\n      <Container>\n        <img src={poster} alt={title} />\n        <Wrapper>\n          <Title>{title} ({releaseYear})</Title>\n          <p>User Score: {userScore}</p>\n          <Text><Span>Overview</Span>{overview}</Text>\n          {genres && <Text><Span>Genres</Span>{genres.map(item => item.name).join(', ')}</Text>}\n        </Wrapper>\n      </Container>\n      <Wrapper>\n        <Title>Additional information</Title>\n        <NavLink to={'cast'}>Cast</NavLink>\n        <NavLink to={'reviews'}>Reviews</NavLink>\n      </Wrapper>\n    </Main>\n  )\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    release_date: PropTypes.string,\n    poster_path: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({ name: PropTypes.string })\n    ),\n  }).isRequired,\n};","import { getFullMovieInfo } from \"api/api\";\nimport { useParams, Outlet } from \"react-router\";\nimport { useEffect, useState } from 'react';\nimport { MovieCard } from \"components/MovieCard/MovieCard\";\nimport { Suspense } from \"react\";\nimport { TailSpin } from  'react-loader-spinner'\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoader, setIsLoader] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getFilmInfo = async () => {\n      try {\n        setIsLoader(true);\n        const res = await getFullMovieInfo(movieId);\n        setMovie(res);\n      } catch (error) {\n        alert(error.message);\n      } finally {\n        setIsLoader(false);\n      }\n    };\n\n    getFilmInfo();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoader ? <TailSpin /> : <MovieCard movie={movie} />}\n      <Suspense fallback={<TailSpin />}>\n        <Outlet />\n      </Suspense>\n    </>\n  )\n};\n\nexport default MovieDetails"],"names":["BASE_URL","API_KEY","getTrandingMovie","axios","data","results","getSearchMovie","query","getFullMovieInfo","id","getMovieCast","getMovieReviews","NavLink","styled","NavLinkDom","Main","Link","LinkDom","Container","Wrapper","Span","Title","Text","MovieCard","movie","title","release_date","poster_path","vote_average","overview","genres","location","useLocation","backLink","useRef","state","from","poster","releaseYear","Date","getFullYear","userScore","toFixed","to","current","src","alt","map","item","name","join","useState","setMovie","isLoader","setIsLoader","movieId","useParams","useEffect","getFilmInfo","res","alert","message","Suspense","fallback"],"sourceRoot":""}